obj COUNTER is
  sorts Counter .
  protecting NAT .

  op create : Nat Nat -> Counter .
  op reset : Counter -> Counter .
  op inc : Counter -> Counter .
  op dec : Counter -> Counter .
  op set : Counter Nat -> Counter .
  op get : Counter -> Nat .

  var C : Counter .
  vars N L : Nat .

  eq dec(inc(C)) = C .
  eq inc(dec(C)) = C .
  ceq get(set(C, N)) = N if N <= L.
  ceq get(create(N, L)) = N if N <= L.
  eq reset(create(N, L)) = create(0, L) .

  ceq inc(create(N, L)) = create(s(N), L) if N < L .
  ceq dec(create(N, L)) = create(p(N), L) if N > 0 and N <= L .
  ceq inc(create(N, L)) = create(0, L) if N == L .
  ceq dec(create(N, L)) = create(L, L) if N == 0 .
endo
